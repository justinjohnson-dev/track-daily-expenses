import Head from 'next/head';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import ExpenseList from '../components/expenseTable';
import { useEffect, useState } from 'react';

interface ExpenseState {
  expense: string;
  expenseAmount: string;
  expenseCategory: string;
}

interface IncomeState {
  incomeName: string;
  incomeAmount: string;
  incomeCategory: string;
}

import { useMutation, useQuery } from 'react-query';

import queryClient from '../lib/query-client';
import IncomeList from '../components/incomeList';

function useExpenses() {
  return useQuery('expenses', () =>
    fetch('/api/expenses').then((res) => res.json())
  );
}

function useIncome() {
  return useQuery('income', () =>
    fetch('/api/income').then((res) => res.json())
  );
}

interface incomeEntry {
  incomeName: string;
  incomeAmount: number;
  incomeCategory: string;
  incomeDate: string;
}

function useCreateIncome() {
  return useMutation(
    (income: incomeEntry) =>
      fetch('/api/income', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(income),
      }).then((res) => res.json()),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('income');
      },
    }
  );
}

interface expenseEntry {
  expense: string;
  expenseAmount: number;
  expenseCategory: string;
  expenseDate: string;
}

function useCreateExpense() {
  return useMutation(
    (expense: expenseEntry) =>
      fetch('/api/expenses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(expense),
      }).then((res) => res.json()),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('expenses');
      },
    }
  );
}

export default function Home() {
  const { data: expenses, isLoading: isLoadingExpenses } = useExpenses();
  const { data: income, isLoading: isLoadingIncome } = useIncome();
  const [currentExpenseSum, setCurrentExpenseSum] = useState<number>(0);
  const [currentIncomeSum, setCurrentIncomeSum] = useState<number>(0);

  useEffect(() => {
    if (expenses) {
      const sumOfExpenses = expenses.reduce(function (
        runningSum: any,
        expense: { expenseAmount: any }
      ) {
        return runningSum + expense.expenseAmount;
      },
      0);
      setCurrentExpenseSum(sumOfExpenses);
    }
  }, [expenses, currentExpenseSum]);

  useEffect(() => {
    if (income) {
      const sumOfIncome = income.reduce(function (
        runningSum: any,
        incomeEntry: { incomeAmount: any }
      ) {
        return runningSum + incomeEntry.incomeAmount;
      },
      0);
      setCurrentIncomeSum(sumOfIncome);
    }
  }, [income, currentIncomeSum]);

  const expenseMutation = useCreateExpense();
  const incomeMutation = useCreateIncome();

  const [expenseForm, setExpenseForm] = useState<ExpenseState>({
    expense: '',
    expenseAmount: '',
    expenseCategory: '',
  });

  const [incomeForm, setIncomeForm] = useState<IncomeState>({
    incomeName: '',
    incomeAmount: '',
    incomeCategory: '',
  });

  const clearExpenseForm = () => {
    setExpenseForm({
      expense: '',
      expenseAmount: '',
      expenseCategory: '',
    });
  };

  const clearIncomeForm = () => {
    setIncomeForm({
      incomeName: '',
      incomeAmount: '',
      incomeCategory: '',
    });
  };

  const onSubmitExpense = async () => {
    try {
      const expense = {
        expense: expenseForm.expense,
        expenseAmount: Number(expenseForm.expenseAmount),
        expenseCategory: expenseForm.expenseCategory,
        expenseDate: new Date().toLocaleString('en-US', {
          timeZone: 'CST',
          dateStyle: 'full',
          timeStyle: 'full',
        }),
      };

      await expenseMutation.mutateAsync(expense);
      clearExpenseForm();
    } catch (error) {
      console.log(error);
    }
  };

  const onSubmitIncom = async () => {
    try {
      const income = {
        incomeName: incomeForm.incomeName,
        incomeAmount: Number(incomeForm.incomeAmount),
        incomeCategory: incomeForm.incomeCategory,
        incomeDate: new Date().toLocaleString('en-US', {
          timeZone: 'CST',
          dateStyle: 'full',
          timeStyle: 'full',
        }),
      };

      await incomeMutation.mutateAsync(income);
      clearIncomeForm();
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div>
        <h1 style={{ padding: '3% 5%' }}>Daily Expense Tracking</h1>
      </div>
      <div>
        {' '}
        {!isLoadingExpenses &&
          expenses !== undefined &&
          expenses.map((expense: any, index: number) => {
            return <ExpenseList key={index} data={expense} />;
          })}
      </div>
      <div>
        <code>
          January Spending: ${Math.round(currentExpenseSum * 100) / 100}
        </code>
      </div>
      <hr />
      <div>
        {' '}
        {!isLoadingIncome &&
          income !== undefined &&
          income.map((incomeEntry: any, index: number) => {
            return <IncomeList key={index} data={incomeEntry} />;
          })}
      </div>
      <div>
        <code>January Income: ${currentIncomeSum}</code>
      </div>

      <main
        style={{
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: '6rem',
          minHeight: '100vh',
        }}
      >
        <div
          style={{
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'inherit',
            alignItems: 'inherit',
            fontSize: '0.85rem',
            maxWidth: 'var(--max-width)',
            width: '100%',
            zIndex: '2',
            fontFamily: 'var(--font-mono)',
          }}
        >
          <p
            style={{
              margin: '0.25rem',
              padding: '1rem',
              backgroundColor: ' rgba(var(--callout-rgb), 0.5)',
              border: ' 1px solid rgba(var(--callout-border-rgb), 0.3)',
              borderRadius: 'var(--border-radius)',
            }}
          >
            <code
              style={{
                fontWeight: '700',
                fontFamily: 'var(--font-mono)',
              }}
            >
              Outgoing expenses
            </code>
          </p>
          <div>
            <TextField
              style={{ margin: '1%' }}
              id='outlined-textarea'
              label='Expense'
              placeholder='Starbucks'
              multiline
              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                setExpenseForm({
                  ...expenseForm,
                  expense: event.target.value,
                });
              }}
              value={expenseForm.expense}
            />
            <TextField
              style={{ margin: '1%' }}
              id='outlined-textarea'
              label='Expense Amount'
              placeholder='10.34'
              multiline
              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                setExpenseForm({
                  ...expenseForm,
                  expenseAmount: event.target.value,
                });
              }}
              value={expenseForm.expenseAmount}
            />
            <TextField
              style={{ margin: '1%' }}
              id='outlined-textarea'
              label='Expense Category'
              placeholder='Food'
              multiline
              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                setExpenseForm({
                  ...expenseForm,
                  expenseCategory: event.target.value,
                });
              }}
              value={expenseForm.expenseCategory}
            />
            <div>
              <Button
                variant='outlined'
                style={{
                  float: 'right',
                }}
                onClick={onSubmitExpense}
              >
                Submit
              </Button>
            </div>
          </div>
        </div>
        <div
          style={{
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'inherit',
            alignItems: 'inherit',
            fontSize: '0.85rem',
            maxWidth: 'var(--max-width)',
            width: '100%',
            zIndex: '2',
            fontFamily: 'var(--font-mono)',
          }}
        >
          <p
            style={{
              margin: '0.25rem',
              padding: '1rem',
              backgroundColor: ' rgba(var(--callout-rgb), 0.5)',
              border: ' 1px solid rgba(var(--callout-border-rgb), 0.3)',
              borderRadius: 'var(--border-radius)',
            }}
          >
            <code
              style={{
                fontWeight: '700',
                fontFamily: 'var(--font-mono)',
              }}
            >
              Incoming expenses
            </code>
          </p>
          <div>
            <TextField
              style={{ margin: '1%' }}
              id='outlined-textarea'
              label='Expense'
              placeholder='Paycheck'
              multiline
              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                setIncomeForm({
                  ...incomeForm,
                  incomeName: event.target.value,
                });
              }}
              value={incomeForm.incomeName}
            />
            <TextField
              style={{ margin: '1%' }}
              id='outlined-textarea'
              label='Expense Amount'
              placeholder='3050.75'
              multiline
              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                setIncomeForm({
                  ...incomeForm,
                  incomeAmount: event.target.value,
                });
              }}
              value={incomeForm.incomeAmount}
            />
            <TextField
              style={{ margin: '1%' }}
              id='outlined-textarea'
              label='Expense Category'
              placeholder='Income'
              multiline
              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                setIncomeForm({
                  ...incomeForm,
                  incomeCategory: event.target.value,
                });
              }}
              value={incomeForm.incomeCategory}
            />
            <div>
              <Button
                variant='outlined'
                style={{
                  float: 'right',
                }}
                onClick={onSubmitIncom}
              >
                Submit
              </Button>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
